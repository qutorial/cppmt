\chapter{C++ Object-Oriented Programming}

The \cpppl\ is a multi-paradigm programming language. The ability to support the object-oriented programming,
is incorporated via classes. 

A class represents a new type in the \cpppl. Each class may have data in the 
form of fields, and behavior in the form of methods. Two types of methods are special for
C++ - constructors and destructors, they have special meaning and syntax.

Encapsulation is enabled via governing access permissions to fields and methods of a class.
The access control is governed with the creation of \cc{public}, \cc{protected} and \cc{private}
class sections.

Inheritance is implemented in C++ via allowing for each class to have one, or even many base classes.
Inheritance from a base class is performed under a certain access control modifier. There is no pure notion 
of an interface, but rather abstract classes are introduced.

Polymorphism is implemented via pointer-to-class type compatibility over inheritance-connected classes.

The implementation of these C++ features in a projectional editor environment is discussed in the
following chapters.


\section{Class declaration}
\label{section:classes}


% Enforcement of one section and only one.
% Enforcement of sections order
% Constructor markup
% Copy constructor and constructor generation


The \cpppl\ is a mature language, with long traditions, and high flexibility, \cite{alexandrescu} can serve as an example. 
Although the language is also famous for being complex. It will not be possible to simplify language, removing features from 
it, which will restrict the language use. In this work I try to research, how the editor can be more supportive for the user,
to eliminate usual mistakes made while programming, as well as provide help in structuring the code.


\subsection{Visibility Sections}
\label{visibilitysections}


Instead of declaring visibility type for individual class members, visibility sections are created
in C++. 

The sections can be opened with a string \cc{private:}, \cc{protected:} or \cc{public:}
within a class declaration, and closed when another section is opened or when the class declaration
ends. This allows the user to open and close the same section multiple times and declare sections
without any particular order.

Various coding guidelines (\cite{cppclasslayout}, \cite{googlecppstyle}) exist to enforce some 
restrictions on the visibility sections.

In particular, the sections are allowed to be opened only once. This ensures, the
reader of the code will see interface of the class (public section) in one place,
``contents'' of the class (private section) in one place, and opportunities to access members in
the inheriting class (protected section) in one place, without the need to scroll through through
the whole class declaration.

Another typical requirement in coding standards, is the order of the section. Usually the public 
section is required to be first, for the class users to see immediately the public interface,
the class provides.

\ms{webpage}{Sample class type declaration}


The \fig{webpage}, shows an example class declaration implemented in the projectional editor.
The class concept has the visibility sections as children. Each section is given a separate role,
and can appear 0 or 1 times. The editor for the class concept orders the visibility sections so,
that the public section always comes first, followed by the private and protected sections.

% Limitation
A question arises on how to support another way to represent a class, so that it will reflect
requirements from a different coding standard. And as a way to resolve it a definition of 
another editor for a class concept can be offered, Unfortunately, the current version of \jbmps\ 2.5
does not support a definition of multiple editors for the same concepts. This limitation however
is addressed in the newer 3.0 version.


\subsection{Constructors}
\label{classconstructors}

% It is also considered to be 
% a ``complicated'' language to learn. This is true due to the various language constructions, which are many,
% and which are all important to use the language. 


% To be used later when discussing inheritance

% Although
% the three inheritance modifiers are named in the same way as in-class access modifiers


% To be used later when writing about type conversion.

% Constructors among the special meaning of creating 
% instances of the type class, are also participating in the type conversion mechanisms.
% Namely, if there is a constructor a class of \cc{B} from a class \cc{A}: \cc{B(A obj)} or 
% similar, any object of the class \cc{A} can participate in places, where an object of the 
% class \cc{B} is requested originally, as implicit type conversion takes place, invoking the 
% \cc{B(A obj)} constructor.



\section{Encapsulation and Inheritance}

\section{Polymorphism}

