\section{Polymorphism}

There are several ways to achieve polymorphic behavior in C++. The purists of the language differentiate 
between the polymorphism based on virtual functions or on templates. More general opinion can include
in the notion of the polymorphism also functions overloading and operator overloading, also called 
\emph{ad hoc} polymorphism. Occasionally various operations with \cc{void *} are also classified as 
the polymorphic programming.

In this section I am writing only about the class-related virtual functions polymorphism.

\subsection{Virtual Functions Polymorphism in C++}

Starting the description of the projectional implementation, I find it good to spend some time describing
the way, the polymorphism is implemented in the \cpppl\ itself.

Dislike many other popular object-oriented programming languages in the C++ there is no pure notion of
an interface. Instead, a base class is used as an interface declaration for its descendants. Functions
designated to be a part of the interface must be declared \cc{virtual} and they can be overloaded in
the subclasses.

The virtual functions in the base-interface class can be implemented as well, providing some ``default''
implementation. Otherwise they are left \emph{pure virtual}, meaning that no implementation is provided
and the pointer to the function in the table of pointers to virtual functions is zeroed. The syntax
for pure virtual functions is rather not obvious, when not knowing about the zero pointer semantics,
and a bit cumbersome requiring to type one reserved word, one punctuation sign and one number to 
express simple fact of pure virtuality or, simply, absence of implementation, \rl{purevirtual}.

\cpp{Pure Virtual Function Syntax Example}{purevirtual}

Such approach is more flexible compared to languages with the notion of interface directly introduced.
In C++ it is possible to create partially implemented base classes, what can not be done when implementing
and interface in Java or C\#, where the approach is ``all or none'' regarding the implementation of interface
functions.

In order to implement a declared in a base class function the descendant must declare and implement
a virtual function, matching the full (with return type) signature of the declared function. The connection 
to the ``interface'' function declaration stays subtle, and it is not immediately clear, whether the 
declared implementation is an override or a new independent declaration. This knowledge affects the 
changing process greatly, as the override should change from the interface, together with all the implementation.
The absence of a clear override syntax I call here ``override syntax absence''.

Whenever a class and all of its ancestors does not provide an implementation of a certain virtual function,
created as a pure virtual in the declaring class, the class is called \emph{abstract}. It is not possible
to construct instances of abstract classes. C++ however does not have any special syntax for abstract classes,  \rl{purevirtual}.
The programmer usually has to be aware (from documentation, implementation, or, the worst case, compilation
errors) whether a given class is abstract. I will call this phenomenon as ``abstract class syntax absence''.

When the overriding a function interface is a active action of the programmer, and is initiated by the 
programmer, the abstract property of the class, oppositely, can be deduced from the analysis on 
the base classes automatically, by editor.

In order to use an interface declared in some class, the using code has to get a pointer to instance
of any implementing the interface descendant class instance. Thus typing system has to allow a pointer
to the descendant to be treated in the way as a pointer to the base would be. The same should hold 
normally for the reference types, but it is not used very often on practice, and omitted in the implementation.
As this typing rule represents the core of polymorphic behavior, I will start from it, describing further the
projectional C++ implementation.

\subsection{Pointer to Class Special Typing}
%Not finished subsection

The pointer type is implemented in a separate language in mbeddr. Following the Goal 3 \ref{g3} the C++ implementation
needs to add the typing rules for pointer \emph{to classes} without changing the pointer mbeddr language, where the 
typing system for pointer type is defined.

In the case when a type of a pointer to a b

\subsection{Overriding a Virtual Function}
%Not finished subsection

\subsection{Pure Virtual Functions}
%Not finished subsection

\subsection{Abstract Classes}
%Not finished subsection

%TODO forbid construction of abstract classes

